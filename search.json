[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COMP/STAT212 Portfolio",
    "section": "",
    "text": "Welcome\nWelcome to my online portfolio for COMP/STAT112 course taken at Macalester College. Please, use the side bar on the left for navigation.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "src/pv/pv-01.html",
    "href": "src/pv/pv-01.html",
    "title": "Professional Viz Sample",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "Prof Viz",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Professional Viz Sample</span>"
    ]
  },
  {
    "objectID": "src/tt/hw01-tt.html",
    "href": "src/tt/hw01-tt.html",
    "title": "Homework 01 – TidyTuesday 09/02/2025",
    "section": "",
    "text": "TidyTuesday Section\nExplore the week’s TidyTuesday challenge. Develop a research question, then answer it through a short data story with effective visualization(s). Provide sufficient background for readers to grasp your narrative.\nCode#Necessary Libraries\n#| include: false\n#| echo: false\n\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(viridis)",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Homework 01 -- TidyTuesday 09/02/2025</span>"
    ]
  },
  {
    "objectID": "src/tt/hw01-tt.html#importing-data",
    "href": "src/tt/hw01-tt.html#importing-data",
    "title": "Homework 01 – TidyTuesday 09/02/2025",
    "section": "Importing Data",
    "text": "Importing Data\nReading in the data both about the families and genus of the frogs as well as individual frog ID events. The individual observation events were recorded frog calls by citizen scientists in Australia. The frogs were then identified via their calls by experts.\n\nCodeFrog_ID &lt;- read.csv(\"tidytuesday/data/2025/2025-09-02/frogID_data.csv\")\nFrog_names &lt;- read.csv(\"tidytuesday/data/2025/2025-09-02/frog_names.csv\")\n\n\nResearch Question: What subfamilies are the most abundant in Australia, and when are they the most abundant?",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Homework 01 -- TidyTuesday 09/02/2025</span>"
    ]
  },
  {
    "objectID": "src/tt/hw01-tt.html#exploring-the-data",
    "href": "src/tt/hw01-tt.html#exploring-the-data",
    "title": "Homework 01 – TidyTuesday 09/02/2025",
    "section": "Exploring the Data",
    "text": "Exploring the Data\nIn order to create visualizations and have subfamilies corresponding to each observation I had to join the two different data sets by their scientific name.\n\nCode#Joining data sets together via scientific name and getting month of the observations\nFrog_expanded &lt;- \n  left_join(Frog_ID, Frog_names, by = \"scientificName\") |&gt; \n  mutate(eventDate = as.Date(eventDate)) |&gt; \n  mutate(month = format(eventDate, \"%b\")) \n\n\nI then created a table that shows the counts of each subfamily of frog for each month over the year of 2023 in order to get an idea of what family was most abundant and when.\n\nCode#Demonstrating the count of each subfamily for each month\nFrog_expanded |&gt; \n  na.omit(subfamily) |&gt; #omiting observations that do not have a subfamily, excludes &gt;9000 observations\n  count(month, subfamily) |&gt; \n  mutate(month = factor(month, levels = month.abb, ordered = TRUE)) |&gt; \n  arrange(month)\n\n   month     subfamily     n\n1    Jan         Hylid  8664\n2    Jan  Microhylidae   155\n3    Jan  Myobatrachid  7021\n4    Jan         Ranid    12\n5    Jan          Toad   282\n6    Feb         Hylid  3675\n7    Feb  Microhylidae   103\n8    Feb  Myobatrachid  4735\n9    Feb         Ranid     5\n10   Feb          Toad   201\n11   Mar         Hylid  1516\n12   Mar  Microhylidae    53\n13   Mar  Myobatrachid  4697\n14   Mar         Ranid    15\n15   Mar          Toad   112\n16   Apr         Hylid   883\n17   Apr  Microhylidae    21\n18   Apr  Myobatrachid  5810\n19   Apr         Ranid    22\n20   Apr          Toad    36\n21   May         Hylid   630\n22   May  Microhylidae     7\n23   May  Myobatrachid  3270\n24   May         Ranid    13\n25   May          Toad     9\n26   Jun         Hylid  1291\n27   Jun  Microhylidae    30\n28   Jun  Myobatrachid  5002\n29   Jun         Ranid    13\n30   Jun          Toad    12\n31   Jul         Hylid  1476\n32   Jul  Microhylidae    60\n33   Jul  Myobatrachid  7471\n34   Jul         Ranid    21\n35   Jul          Toad    36\n36   Aug         Hylid  2634\n37   Aug  Microhylidae    24\n38   Aug  Myobatrachid 12016\n39   Aug         Ranid    18\n40   Aug          Toad    18\n41   Sep         Hylid  5992\n42   Sep  Microhylidae    48\n43   Sep  Myobatrachid 12323\n44   Sep         Ranid    12\n45   Sep          Toad    74\n46   Oct         Hylid  6851\n47   Oct  Microhylidae    28\n48   Oct  Myobatrachid  8677\n49   Oct         Ranid    11\n50   Oct          Toad    59\n51   Nov         Hylid 11195\n52   Nov  Microhylidae    38\n53   Nov  Myobatrachid  9862\n54   Nov         Ranid    19\n55   Nov          Toad   209\n\n\nIt is important to note that in this case there are no observations for the month of December, so we cannot make a blanket statement saying the months Nov-Jan for example, as strickly speaking it is not true.",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Homework 01 -- TidyTuesday 09/02/2025</span>"
    ]
  },
  {
    "objectID": "src/tt/hw01-tt.html#visualizations",
    "href": "src/tt/hw01-tt.html#visualizations",
    "title": "Homework 01 – TidyTuesday 09/02/2025",
    "section": "Visualizations",
    "text": "Visualizations\nIn order to get a better idea of the abundance of each family in comparison to the overall density for each month I created the following visualization.\n\nCode#Shows the overall amount of frogs over the year compared to the \nFrog_expanded |&gt; \n  na.omit(subfamily) |&gt;\n  ggplot(aes(x = eventDate)) + \n  geom_density(aes(fill = subfamily), alpha = 0.5) +\n  geom_histogram(aes(y = after_stat(density)), binwidth = 29, alpha = 0.5) + \n  theme_minimal() + \n  scale_fill_viridis_d() + \n  labs(x = \"Date\", y = \"Density\", title = \"Density of Frogs and their Subfamilies over Time\", subtitle = \"2023\", fill = \"Subfamily\")\n\n\n\n\n\n\n\nAs we can see in above visualization is that frog calls tend to be more abundant October to January which is spring to summer in Australia. Toads most abundant around January-Febuary, late season. In comparison, Hylids are most abundant in December and January, mid to late season. Myobatrachid peaked in October as well as November. Ranid stay pretty consistent throughout the year. However the visuals layering of all the different subfamilies make it difficult to pull out exact measurements. For example, no trends for Microhylidae can be distinguished. The follow visualization splits all the different subfamiles so that they can be better compared against one another rather than the general trend.\n\nCode#Shows the distribution of each subfamily over the course of a year\nFrog_expanded |&gt; \n  na.omit(subfamily) |&gt;\n  ggplot(aes(x = eventDate, fill = subfamily)) +\n  geom_density() +\n  facet_wrap(~subfamily) + \n  labs(title = \"Distribution of Subfamilies\", subtitle = \"2023\", x = \"Date\", y = \"Probability Density\", fill = \"Subfamily\") + \n  theme_minimal() + \n  scale_fill_viridis_d()\n\n\n\n\n\n\n\nFrom this we can tell much more distinctly that Frogs that fall under the Microhylidae family tend to peak in January-Feburary while staying relatively consistent the rest of the year. However while this visual allows you to compare the density of each species relative to the total of each species not the total number of frogs or count. The following visualization addresses this issue.\n\nCode# Function to hide every other label\nevery_other_label &lt;- function(x) {\n      labels &lt;- as.character(x)\n      labels[seq(2, length(labels), 2)] &lt;- \"\"\n      return(labels)}\n\n#Shows the proportion of the different frog families over the course of the year \nFrog_expanded |&gt;\n  na.omit(subfamily) |&gt;\n  mutate(month = factor(month, levels = month.abb, ordered = TRUE)) |&gt; \n  ggplot(aes(x = month, , fill = subfamily)) + \n  geom_bar() + \n  facet_wrap(~subfamily) + \n  scale_fill_viridis_d() + \n  scale_x_discrete(labels = every_other_label) + \n  labs(x = \"Month\", y = \"Number of Frogs\", title = \"The Number of Frogs of each Subfamily per Month\", subtitle = \"2023\", fill = \"Subfamily\")\n\n\n\n\n\n\n\nThrough this visual we can clearly see that the Myobatrachid of frogs are the most abundant year round and make up most of the frogs that were documented in Australia in 2023. Hylids are the second most common subfamily, followed by Toad and Microhylidae and lastly Ranid. However because the last 3 categories are all significantly smaller than Hylids and Myobatrachid it is difficult to compare them.\nNevertheless we have answered the research question that Myobatrachids are the most abundant Frog subfamily in Australia and are more relatively abundant during the months of August to November.",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Homework 01 -- TidyTuesday 09/02/2025</span>"
    ]
  },
  {
    "objectID": "src/tt/2025-07-15.html",
    "href": "src/tt/2025-07-15.html",
    "title": "TidyTuesday Sample 2",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "TidyTuesday",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>TidyTuesday Sample 2</span>"
    ]
  },
  {
    "objectID": "src/ica/Review.html",
    "href": "src/ica/Review.html",
    "title": "Cleaning SFO Weather Data",
    "section": "",
    "text": "Exercise\nCarryout the following steps to clean and save the San Francisco Weather data. Make sure to download and add the data file to your portfolio repository as instructed.\nCodelibrary(tidyverse)\nlibrary(readr) #To get read_csv in the CSV\n\n#Step 1\nweather_data &lt;- read_csv(\"../../data/raw/weather.csv\") #Reading in the Data\nCode#Step 2\n#Cleaning out large value in PrecipYr\nweather_clean &lt;- weather_data |&gt; \n  mutate(PrecipYr &lt;- na_if(PrecipYr, 99999))\nCode#Step 3\n#Creating variable that shows the day of the year\nweather_clean &lt;- weather_data |&gt; \n  arrange(Month, Day) |&gt; \n  mutate(dateInYear &lt;- seq(from = 1, to = 365, by = 1))\nCode#Step 4\n#Creating variable that shows 3 letter month abbreviation\nweather_clean &lt;- weather_data |&gt; \n  mutate(month_name &lt;- month.abb[Month])\nCode#Step 5\n#Saving the data to another source \nwrite_csv(weather_clean, file = \"../../data/processed/weather_clean.csv\")",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning SFO Weather Data</span>"
    ]
  },
  {
    "objectID": "src/ica/Review.html#exercise",
    "href": "src/ica/Review.html#exercise",
    "title": "Cleaning SFO Weather Data",
    "section": "",
    "text": "Read in the weather data in this file with the correct relative file path after you move it to the instructed location.\n\n\n\nThere is a variable that has values that don’t make sense in the data context. Figure out which variable this is and clean it up by making those values missing using na_if().\n\n\n\nCreate a variable called dateInYear that indicates the day of the year (1-365) for each case. (Jan 1 should be 1, and Dec 31 should be 365).\n\n\n\nCreate a variable called month_name that shows the 3-letter abbreviation for each case.\n\n\n\nSave the wrangled data to the data/processed/ folder using write_csv(). Name this file weather_clean.csv. Look up the documentation for this function by typing ?write_csv in the Console. You’ll need to write an appropriate relative path.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning SFO Weather Data</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html",
    "href": "src/ica/Advanced_data_viz.html",
    "title": "3 Advanced Data Viz",
    "section": "",
    "text": "🧩 Learning Goals\nBy the end of this lesson, you should be able to:",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#learning-goals",
    "href": "src/ica/Advanced_data_viz.html#learning-goals",
    "title": "3 Advanced Data Viz",
    "section": "",
    "text": "Navigate ggplot2 reference page to find needed functions for a desired visualization\nNavigate the different sections of a function help page to construct desired plot features, in particular,\n\nNavigate the Usage section to identify arguments that must be set\nNavigate the Arguments section to understand how arguments work\nNavigate the Aesthetics section to learn how plot appearance can be controlled\nNavigate the Examples section for some usage examples\n\n\nIdentify when to use different data arguments within ggplot() and geom_() layers",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#introduction",
    "href": "src/ica/Advanced_data_viz.html#introduction",
    "title": "3 Advanced Data Viz",
    "section": "Introduction 1\n",
    "text": "Introduction 1\n\nIn this lesson, we are going to recreate NYTimes 2015 Temperature Visualization (html) using data from San Francisco (SFO) in 2011.\n\n\nScreenshot of NYTimes 2015 Temperature Visualization",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#reading-data",
    "href": "src/ica/Advanced_data_viz.html#reading-data",
    "title": "3 Advanced Data Viz",
    "section": "Reading Data",
    "text": "Reading Data\nRun the code chunk below to load the tidyverse package and read in the San Francisco weather data.\n\nCodelibrary(tidyverse)\nweather &lt;- read_csv(\"https://mac-stat.github.io/data/sfo_weather.csv\")",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#understanding-data",
    "href": "src/ica/Advanced_data_viz.html#understanding-data",
    "title": "3 Advanced Data Viz",
    "section": "Understanding Data",
    "text": "Understanding Data\nBelow is the codebook of the data. Familiarize yourself with the meaning of each variable. Use the codebook as a reference when using the data.\n\n\nMonth: Month of the year (1-12)\n\nDay: Day within the month (1-31)\n\nLow/High: Low/high temperature this day\n\nNormalLow/NormalHigh: Typical low/high temperature for this day of the year\n\nRecordLow/RecordHigh: Record low/high temperature for this day of the year\n\nLowYr/HighYr: Year in which the record low/high was observed\n\nPrecip: Amount of precipitation (inches) this day\n\nRecordPrecip: Record amount of precipitation for this day of the year\n\nPrecipYr: Year in which the record precipitation was observed\n\ndate: The actual date in 2011 for this day in YYYY-MM-DD format\n\ndateInYear: What day of the year is it? (1-365)\n\nRecord: Logical (TRUE/FALSE) indicating whether this day had a high temperature record\n\nRecordText: Text that displays the record high for this day (\"Record high: ##\")\n\nRecordP: Logical (TRUE/FALSE) indicating whether this day had a precipitation record\n\nCulmPrec: Cumulative precipitation for the month up to this day",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#exercise-1",
    "href": "src/ica/Advanced_data_viz.html#exercise-1",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 1",
    "text": "Exercise 1\nExamine the NYTimes 2015 Temperature Visualization (html) then answer the following questions.\nData Storytelling\n\nRelate the intro paragraph: “Scientists declared that 2015 was Earth’s hottest year on record…” to the design of the visualization. In particular, based on the intro paragraph,\n\nWhat key message/claim does NYTimes want readers to be able to explore? NYT wants readers to explore their own cities and see how 2015 compares to the historical average temperature over the course of a year regardless of location.\nHow did this goal inform what information is displayed in the visualization? It means that there is a part that shows the historical average and then one that shows the daily average from 2025 overlayed on one another. Then it also provides the option to switch through cities to compare how they have changed easier.\n\n\n\nAesthetic Mapping\n\nWhat specific variables (from the data codebook) underlie the visualization?\nHow do these variables map to aesthetics of the visual elements, eg, position, size, shape, and color of glyphs?\n\nFor x most likely the dateInYear or date variable, for y it is the Record Low/High overlayed with NormalHigh/NormalLow. Depending on the city there is RecordPrecip. Date in year makes up the x axis and is spkit into months very nicely, which each day making a small rectangular box. The record High and low are a redish pink cover overlayed on the grey to allow for comparison. The high and low make up either end of the box or each day, so longer boxes have more of a range of temperatures. Grey tends to take a more even slope/change as it are historical averages. They move from city to city up or down normally situating around a certain average temperature.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#exercise-2",
    "href": "src/ica/Advanced_data_viz.html#exercise-2",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 2",
    "text": "Exercise 2\nNavigate the Geoms section of the ggplot2 reference page to find a geom that corresponds to the visual elements in the temperature plot. Using both the small thumbnail visuals on the right and the names of the geom’s, brainstorm some possibilities for geom’s you might use to recreate the temperature visualization.\n\n\n\n\n\n\nNavigating Documentation / Reference Pages\n\n\n\nYou need to navigate the geoms further by opening up their reference pages to understand if a particular geom is suitable for our task. Let’s look at the geom_point documentation page to learn how to read a documentation page..\nThe Usage section shows all of the possible inputs (arguments) to the geom. These are all of the ways that a geom can be customized. Just looking at the argument names can help give a hint as to what arguments might fit our needs.\nThe Arguments section, on the other hand, explains in detail what each argument does and the possible values the argument can take. The mapping, data, and ... arguments will be the most commonly used by far.\n\n\nmapping is the argument that is being used when we specify which variables should link or map to the plot aesthetics (the code inside aes()).\n\ndata is the argument where we specify the dataset containing the variables that the geom is using.\n\n... is used for fixed aesthetics (ones that don’t correspond to a variable), eg, to set the color of all points, we use color = \"red\" and to set the size of all points, we use size = 3.\n\nThe Aesthetics section of a geom documentation page gives information on how the visual elements of the geom correspond to data. For example, the geom_point documentation page shows that x and y aesthetics are available. It also shows some new aesthetics like stroke.\n\n\n\n\n\n\n\n\ndata Argument\n\n\n\nPreviously you have used one dataset per plot by specifying that as the first argument of ggplot(). However, multiple data sets can be passed into ggplot as shown in the example below.\n\nCodedata(diamonds)\n\ndiamonds_avg_price &lt;- diamonds |&gt;\n  group_by(carat) |&gt;\n  summarize(avg_price = mean(price)) |&gt;\n  arrange(carat)\ndiamonds_avg_price &lt;- diamonds_avg_price[seq(1, nrow(diamonds_avg_price), 3), ]\n\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_point() +\n  geom_point(\n    data = diamonds_avg_price,\n    aes(x = carat, y = avg_price),\n    color = \"deepskyblue\",\n    size = 3\n  )\n\n\n\n\n\n\n\n\n\nLook at the geom_linerange documentation page and start off your temperature visualization with the record lows and highs. Your plot should look like the one below. The hex code of the used light tan color is #ECEBE3.\n\n\nSFO Weather Records in 2011\n\n\nCodeggplot(weather) +\n  geom_linerange(aes(x = dateInYear, ymax = RecordHigh, ymin = RecordLow), color = \"#ECEBE3\" ) + \n    theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeyboard Shortcuts\n\n\n\nAs you work on this plot, try to use some new keyboard shortcuts. Focus on the following:\n\nInsert code chunk: Ctrl+Alt+I (Windows). Option+Command+I (Mac).\nRun current code chunk: Ctrl+Shift+Enter (Windows). Command+Shift+Return (Mac).\nRun current line/currently selected lines: Ctrl+Enter (Windows). Command+Return (Mac).",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#exercise-3",
    "href": "src/ica/Advanced_data_viz.html#exercise-3",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 3",
    "text": "Exercise 3\nIn your visualization, also display the usual temperatures (NormalLow and NormalHigh) and actual 2011 temperatures (Low and High). Your plot should look like the one below. The hex code of the color used for the usual temperatures is \"#C8B8BA\" and for the color used for actual temperatures is \"#A90248\".\n\n\nSFO observed, Average, and Record Daily Temperatures in 2011\n\n\nCodeggplot(weather) +\n  geom_linerange(aes(x = dateInYear, ymax = RecordHigh, ymin = RecordLow), color = \"#ECEBE3\" ) + \n  geom_linerange(aes(x = dateInYear, ymax = NormalHigh, ymin = NormalLow), color = \"#C8B8BA\") + \n  geom_linerange(aes(x = dateInYear, ymax = High, ymin= Low), color = \"#A90248\") + \n  theme_classic() \n\n\n\n\n\n\n\n\n\n\n\n\n\nFiner Control\n\n\n\nIf you’d like finer control of the width of these lines/rectangles, check out the geom_rect documentation page.",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#exercise-4",
    "href": "src/ica/Advanced_data_viz.html#exercise-4",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 4",
    "text": "Exercise 4\nRecreate the visual demarcations of the months by adding vertical lines separating the months. Brainstorm how we might draw those vertical lines. What geom might we use? What subset of the data might we use in that geom layer to draw lines only at the month divisions?\n\nCode#Small data set with end of the month for each month, \nMonth_data &lt;- weather |&gt; \n  group_by(Month) |&gt; \n  filter(Day == max(Day)) |&gt; \n  ungroup()\n\nggplot() +\n  geom_linerange(data = weather, aes(x = dateInYear, ymax = RecordHigh, ymin = RecordLow), color = \"#ECEBE3\" ) + \n  geom_linerange(data = weather, aes(x = dateInYear, ymax = NormalHigh, ymin = NormalLow), color = \"#C8B8BA\") + \n  geom_linerange(data = weather, aes(x = dateInYear, ymax = High, ymin= Low), color = \"#A90248\") + \n  #geom_rect(data = weather, aes(x = dateInYear, ymax = High, ymin= Low), fill = \"#A90248\",alpha = 0.3, inherit.aes = FALSE) + \n  theme_classic() + \n  geom_vline(data = Month_data, aes(xintercept = dateInYear), linetype = \"dotted\")",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#exercise-5",
    "href": "src/ica/Advanced_data_viz.html#exercise-5",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 5",
    "text": "Exercise 5\nChange the x-axis labels so that the month names display in the center of each month’s slice of the plot.\n\n\n\n\n\n\nMonth Names\n\n\n\nR has built-in variables called month.abb and month.name that contain abbreviated and full month names.\n\n\n\nCode#Small data set with end of the month for each month, \nMonth_data &lt;- weather |&gt; \n  group_by(Month) |&gt; \n  filter(Day == max(Day)) |&gt; \n  ungroup() \n\nMid_month &lt;- weather |&gt; \n  group_by(Month) |&gt; \n  summarize(across(where(is.numeric), ~mean(.x, na.rm = TRUE)))\n\nmonth_numeric &lt;- as.numeric(format(month, format = \"%U\"))\nmonth_label &lt;- format(month, format = \"%b\")\n\nggplot(weather) +\n  geom_linerange(aes(x = dateInYear, ymax = RecordHigh, ymin = RecordLow), color = \"#ECEBE3\" ) + \n  geom_linerange(aes(x = dateInYear, ymax = NormalHigh, ymin = NormalLow), color = \"#C8B8BA\") + \n  geom_linerange(aes(x = dateInYear, ymax = High, ymin= Low), color = \"#A90248\") + \n  scale_x_continuous(breaks = Mid_month$dateInYear, labels = month.abb) + \n  #geom_rect(data = weather, aes(x = dateInYear, ymax = High, ymin= Low), fill = \"#A90248\",alpha = 0.3, inherit.aes = FALSE) + \n  theme_classic() + \n  geom_vline(data = Month_data, aes(xintercept = dateInYear), linetype = \"dotted\")\n\n\n\n\n\n\n\nTry to figuring out this new challenge using search engines and large language models: - Search Engines. Use Google to search for possible solutions using the jargon that is most likely to return the most relevant results. Record search queries and your thought process in selecting which search results to look at first.\n\n\nLLMs. Use ChatGPT or Gemini with prompts that will most efficiently get you the desired results. Record the chat prompts used and output given. Evaluate the output. Do you fully understand the code generated? How can you tell that the generated code is correct?",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#exercise-6",
    "href": "src/ica/Advanced_data_viz.html#exercise-6",
    "title": "3 Advanced Data Viz",
    "section": "Exercise 6",
    "text": "Exercise 6\nCreate a precipitation plot that looks like the following. Note that\n\nThe triangles point to precipitation records–refer to the data codebook above for the RecordP variable.\nThe numbers on the plot indicate the total precipitation for the month–search the hjust and vjust options to adjust the alignment of the numbers.\nThe blue and tan colors hex codes are \"#32a3d8\" and \"#ebeae2\", respectively.\n\n\n\nSFO Precipitation in 2011",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#done",
    "href": "src/ica/Advanced_data_viz.html#done",
    "title": "3 Advanced Data Viz",
    "section": "Done!",
    "text": "Done!\n\nCheck the ICA Instructions for how to (a) push your code to GitHub and (b) update your portfolio website",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/ica/Advanced_data_viz.html#footnotes",
    "href": "src/ica/Advanced_data_viz.html#footnotes",
    "title": "3 Advanced Data Viz",
    "section": "",
    "text": "The exercise in this lesson are inspired by an assignment from the Concepts in Computing with Data course at UC Berkeley taught by Dr. Deborah Nolan.↩︎",
    "crumbs": [
      "In-Class Activities",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>3 Advanced Data Viz</span>"
    ]
  },
  {
    "objectID": "src/appx/appx-sample1.html",
    "href": "src/appx/appx-sample1.html",
    "title": "Appendix A — Appendix Sample 1",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Appendix Sample 1</span>"
    ]
  },
  {
    "objectID": "src/appx/appx-sample2.html",
    "href": "src/appx/appx-sample2.html",
    "title": "Appendix B — Appendix Sample 2",
    "section": "",
    "text": "Add content here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Appendix Sample 2</span>"
    ]
  },
  {
    "objectID": "mm/mm.html",
    "href": "mm/mm.html",
    "title": "Appendix C — Mind Maps",
    "section": "",
    "text": "Creativity",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Mind Maps</span>"
    ]
  },
  {
    "objectID": "mm/mm.html#creativity",
    "href": "mm/mm.html#creativity",
    "title": "Appendix C — Mind Maps",
    "section": "",
    "text": "0808-mind_map_example.jpg\n\n\n\n\n\n0905-Review_mind_map.jpeg\n\n\n\n\n\n0908-Data_Visualization.jpeg\n\n\n\n\n\n0910-Advanced_spatial_data_viz.jpeg",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Mind Maps</span>"
    ]
  }
]